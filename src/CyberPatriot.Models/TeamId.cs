using System;
using System.Collections.Generic;
using CyberPatriot.Models.Serialization;

namespace CyberPatriot.Models
{
    /// <summary>
    /// An immutable team identifier.
    /// </summary>
    [Newtonsoft.Json.JsonConverter(typeof(TeamIdJsonConverter))]
    [System.ComponentModel.TypeConverter(typeof(TeamIdTypeConverter))]
    public struct TeamId : IComparable<TeamId>
    {
        public string CompetitionIdentifier { get; }
        public int TeamNumber { get; }

        public TeamId(string competitionIdentifier, int teamNumber)
        {
            if (int.TryParse(competitionIdentifier, out int numericIdentifier) && (numericIdentifier <= 0 || numericIdentifier >= 100))
            {
                throw new ArgumentOutOfRangeException(nameof(competitionIdentifier));
            }
            if (teamNumber <= 0 || teamNumber >= 10000)
            {
                throw new ArgumentOutOfRangeException(nameof(teamNumber));
            }
            CompetitionIdentifier = competitionIdentifier;
            TeamNumber = teamNumber;
        }

        public int CompareTo(TeamId other)
        {
            if (other == null)
            {
                throw new ArgumentNullException(nameof(other));
            }

            if (CompetitionIdentifier != other.CompetitionIdentifier)
            {
                throw new ArgumentException("Cannot compare team IDs from different seasons.");
            }

            return TeamNumber.CompareTo(other.TeamNumber);
        }

        public override int GetHashCode()
        {
            // Generated by ReSharper - figured it was good enough
            var hashCode = -1305224960;
            hashCode = hashCode * -1521134295 + EqualityComparer<string>.Default.GetHashCode(CompetitionIdentifier);
            hashCode = hashCode * -1521134295 + TeamNumber.GetHashCode();
            return hashCode;
        }

        public override bool Equals(object obj)
        {
            if (obj == null)
            {
                return false;
            }

            if (!(obj is TeamId t))
            {
                return false;
            }

            return t.CompetitionIdentifier == CompetitionIdentifier && t.TeamNumber == TeamNumber;
        }

        public override string ToString()
        {
            // TODO: Super hacky solution, using this only for hotfix
            if (int.TryParse(CompetitionIdentifier, out int numericIdentifier))
            {
                return string.Format("{0:00}-{1:0000}", numericIdentifier, TeamNumber);
            }
            return string.Format("{0}-{1:000}", CompetitionIdentifier, TeamNumber);
        }


        private static readonly System.Text.RegularExpressions.Regex ParseRegex = new System.Text.RegularExpressions.Regex(@"^(\w+)-(\d+)$");

        public static bool TryParse(string idString, out TeamId teamId)
        {
            teamId = default(TeamId);
            if (idString == null)
            {
                return false;
            }
            var regexMatch = ParseRegex.Match(idString);
            if (!regexMatch.Success)
            {
                return false;
            }

            teamId = new TeamId(regexMatch.Groups[1].Value, int.Parse(regexMatch.Groups[2].Value));

            return true;
        }

        public static TeamId Parse(string s)
        {
            if (!TryParse(s, out TeamId retVal))
            {
                throw new ArgumentException();
            }
            return retVal;
        }

        public static bool operator ==(TeamId a, TeamId b) => a.Equals(b);

        public static bool operator !=(TeamId a, TeamId b) => !a.Equals(b);

        public static bool operator <(TeamId a, TeamId b)
        {
            return a.CompareTo(b) < 0;
        }

        public static bool operator >(TeamId a, TeamId b)
        {
            return a.CompareTo(b) > 0;
        }

        public static bool operator <=(TeamId a, TeamId b)
        {
            return a.CompareTo(b) <= 0;
        }

        public static bool operator >=(TeamId a, TeamId b)
        {
            return a.CompareTo(b) >= 0;
        }
    }
}